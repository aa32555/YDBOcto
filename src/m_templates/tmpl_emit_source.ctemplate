{}%
/****************************************************************
 *								*
 * Copyright (c) 2019-2021 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include <ctype.h>

#include <assert.h>

#include "physical_plan.h"
#include "template_helpers.h"

// If we are given something like ^myTable(keys("id")), we should
//  transform this to ^myTable({{ config->global_names.cursor }}(cursorId,PP_KEYS,###,"myTable","id"))

/**
 * Returns n > 0 if this start marks the beginning of a keys(..) expression
 *  Populates column with the column expression, and returns the length
 * Returns -1 if the column won't fit in the buffer
 * Returns 0 if this is not a  match
 */
int match_expression(char *start, char *column, int column_size);

/**
 * Emits the source given, replacing keys("columnName") with
 *  references to this PhysicalPlan's keys
 */
TEMPLATE(tmpl_emit_source, SqlTable *table, char *source, char *table_name, int unique_id, int num_vars_to_match, enum EmitSourceForm form) {
	char	*source_ptr;
	char	column[OCTO_MAX_IDENT + 1]; // Null terminator
	int	t, matched_vars = 0;
	int	key_count;
	int	paren_count = 0;

	source_ptr = source;
	key_count = 0;
	assert(num_vars_to_match);
	// TODO: how does this handle globals that have things like "abc"_keys("id")?
	while (('\0' != *source_ptr) && (matched_vars < num_vars_to_match)) {
		t = match_expression(source_ptr, column, OCTO_MAX_IDENT);
		assert(-1 != t);
		if (0 < t) {
			// Note that we don't add quotes to column in case the user uses an
			//  extrinsic or something
			switch(form) {
			case EmitSourceForm_Value:
				if (NULL != table_name) {
					/* If "table_name" is non-NULL (the usual type of call), it is an indication by the
					 * caller to generate a form of the M global source that is usable in a SELECT query.
					 */
					assert(unique_id);
					%{}{{ config->global_names.cursor }}{}%
					%{}(cursorId,{{ PP_KEYS }},{{ unique_id|%d }},"{{ table_name }}",{{ column }}){}%
				} else {
					/* If "table_name" is NULL, it is a special indication by the caller to generate a
					 * different form of the M global source that is usable in an INSERT INTO query.
					 */
					SqlColumn	*sql_column;
					int		column_len;

					assert(!unique_id);
					assert(MAX_KEY_COUNT == num_vars_to_match);
					/* Find the SqlColumn structure. The column name returned by "match_expression()"
					 * would surround the name with double quotes so remove it temporarily before
					 * invoking "find_column()" to find the corresponding SqlColumn structure.
					 */
					column_len = strlen(column);
					assert('"' == column[0]);
					assert('"' == column[column_len - 1]);
					column[column_len - 1] = '\0';
					sql_column = find_column(column + 1, table);
					assert(NULL != sql_column);
					%{}{{ PP_COL }}({{ sql_column->column_number|%d }}){}%
				}
				break;
			case EmitSourceForm_Trigger:
				%{}{{ PP_KEY_COLUMN }}{}%
				%{}{{ key_count|%d }}=:{}%
				key_count++;
				break;
			default:
				assert(FALSE);
				FATAL(ERR_UNKNOWN_KEYWORD_STATE, "");
				break;
			}
			source_ptr += t;
			matched_vars += 1;
		} else {
			if ((form == EmitSourceForm_Trigger) && ('"' == *source_ptr)) {
				%{}""{}%
			} else {
				%{}{{ *source_ptr|%c }}{}%
			}
			if ('(' == *source_ptr) {
				paren_count++;
			}
			if (')' == *source_ptr) {
				paren_count--;
			}
			source_ptr++;
		}
	}
	while (paren_count > 0) {
		paren_count--;
		%{}){}%
	}
	return;
}

int match_expression(char *start, char *column, int column_size) {
	char	*c, *c2, *column_start;
	char	*keys = "keys(";
	int	paren_count = 0;

	// First match on keys( and we can start parsing table name
	c = start;
	for (c2 = keys; '\0' != *c && '\0' != *c2; c2++, c++) {
		if (*c != *c2) {
			return 0;
		}
	}

	paren_count = 1;
	column_start = c;

	while (paren_count && ('\0' != *c)) {
		switch(*c) {
		case '(':
			paren_count++;
			break;
		case ')':
			paren_count--;
			break;
		default:
			break;
		}
		c++;
	}
	if (0 == paren_count) {
		// Go back a few places as c will include the paren
		c -= 1;
		if(column_size < c - column_start || c < column_start)
			return -1;
		char *d = column;
		char *c2 = column_start;
		TOUPPER(d, &column[column_size], c2, c);
		assert(!(column[0] == '"' && column[1] == '"'));
		return c - start + 1;
	}
	return 0;
}
%{}
