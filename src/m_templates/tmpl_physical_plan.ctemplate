{%
/****************************************************************
 *								*
 * Copyright (c) 2019 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "physical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_physical_plan, PhysicalPlan *plan) {
    TEMPLATE_INIT();
    unsigned int cur_key, limit;
    int dot_count, i;
    SqlKey *key, *t_key;
    SqlColumnAlias *column_alias;
    SqlValue *value;
    PhysicalPlan *next_plan;
    char *key_fixed;
    SqlOptionalKeyword *keyword;
    LogicalPlan *lp_temp;
    char *tableName = "";
    char *columnName = "";
    char *start_table_reference, *end_table_reference;
    char *start_resume = NULL;
    char *end_resume = NULL;
    char c;
    int resume_length;

    %}
;; This is a generated file; do not modify.
{{ plan->plan_name }}(cursorId)
    {% // The whitespace here is needed for proper M formatting


    // Check if there are any cross references that need to be built
    // If this a plan for a cross reference, but safeguards in place to prevent building twice
    if(plan->outputKey && plan->outputKey->is_cross_reference_key) {
        UNPACK_SQL_STATEMENT(value, plan->outputKey->table->tableName, value);
        tableName = value->v.reference;
        UNPACK_SQL_STATEMENT (value, plan->outputKey->column->columnName, value);
        columnName = value->v.reference;
        GET_LP(lp_temp, plan->projection, 0, LP_WHERE);
        GET_LP(lp_temp, lp_temp, 0, LP_COLUMN_ALIAS);
        column_alias = lp_temp->v.column_alias;
    %}LOCK +^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}"):10
    IF $GET(^|"{{ config->global_directory }}"|{{ config->global_names.raw_octo }}("xref_status","{{ tableName }}","{{ columnName }}"))="done" LOCK -^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}") QUIT
    IF '$ZTRI("item","+{% TMPL(tmpl_column_reference_trigger, plan, column_alias); %} -commands=SET,KILL -xecute=""DO handleSet^{{ plan->filename }}""") H
    {% // Whitespace needed
    } else {
        for(cur_key = 0; cur_key < plan->total_iter_keys; cur_key++) {
            key = plan->iterKeys[cur_key];
            t_key = key->cross_reference_output_key;
            if(t_key == NULL)
                continue;
            UNPACK_SQL_STATEMENT(value, t_key->table->tableName, value);
            tableName = value->v.reference;
            UNPACK_SQL_STATEMENT (value, t_key->column->columnName, value);
            columnName = value->v.reference;
            %}DO:'$DATA(^|"{{ config->global_directory }}"|{{ config->global_names.raw_octo }}("xref_status","{{ tableName }}","{{ columnName }}")) ^{{ t_key->cross_reference_filename }}(cursorId)
    {%
        }
    }
    %}NEW %%ydboctoz{%
    limit = plan->total_iter_keys;
    if(plan->set_operation != PP_NOT_SET) {
        limit--;
    }
    for(cur_key = 0; cur_key <= limit; cur_key++) {
        %},%%ydboctoi{{ cur_key|%d }}{%
    }
    %}
    {% // Whitespace for MUMPS

    for(cur_key = 0, dot_count = 0; cur_key < plan->total_iter_keys; cur_key++) {
        // For each key, output the key start, a loop, quit, and increment
        key = plan->iterKeys[cur_key];
        if(key->value) {
            /// TODO: can we simplify this case statement to one expression? tmpl_print_expression should handle LP_VALUE too
            TMPL(print_dots, dot_count);
            switch(key->value->type) {
            case LP_VALUE:
                key_fixed = key->value->v.value->v.string_literal;
                %}SET {% TMPL(tmpl_key, key); %}="{{ key_fixed }}" IF $DATA({% TMPL(tmpl_key_source, plan, key); %})'=0 DO
    {%
                break;
            case LP_COLUMN_ALIAS:
                %}SET {% TMPL(tmpl_key, key); %}={%
                TMPL(tmpl_print_expression, key->value, plan);
                %} IF $DATA({% TMPL(tmpl_key_source, plan, key); %})'=0 DO
    {%
                break;
            default:
                FATAL(ERR_UNKNOWN_KEYWORD_STATE, "");
                break;
            }
            dot_count++;
            continue;
        }
    %}{% TMPL(print_dots, dot_count); %}{% TMPL(tmpl_key_start, key); %}
    {% TMPL(print_dots, dot_count); %}FOR %%ydboctoi{{ cur_key|%d }}=1:1 SET {% TMPL(tmpl_key, key) %}=$ORDER({% TMPL(tmpl_key_advance, plan, key)
    %}) QUIT:({%
        TMPL(tmpl_key_end, key);
        keyword = get_keyword_from_keywords(plan->keywords, OPTIONAL_LIMIT);
        if(keyword != NULL) {
            UNPACK_SQL_STATEMENT(value, keyword->v, value);
            %})!(({{ value->v.string_literal }})'>$GET({% TMPL(tmpl_key, plan->outputKey); %}){%
        }
    %})  DO
    {%
        dot_count++;
    }

    // Output the value
    // Note down where the "resume" pointer starts, incuding the preceeding whitespace
    start_resume = buff_ptr - 4;
    TMPL(print_dots, dot_count);
    if(plan->set_operation == PP_EXCEPT_SET) {
        %}IF 1{%
    } else {
        switch(plan->action_type) {
        case PP_PROJECT:
            %}SET:1{%
            break;
        case PP_DELETE:
            %}KILL:1{%
            break;
        default:
            assert(FALSE);
        }
    }

    if(plan->where && plan->where->v.operand[0]) {
        %}&({%
        TMPL(tmpl_print_expression, plan->where->v.operand[0], plan);
        %}){%
    }
    // Distinct values if needed
    //  NOTE: the EXCEPT set doesn't need to check if a value exists before clearing it
    if(plan->distinct_values && plan->set_operation != PP_EXCEPT_SET) {
        %}&($DATA(^|"{{ config->global_directory }}"|{{ config->global_names.raw_cursor }}(cursorId,"index",{%
        TMPL(tmpl_column_list_combine, plan->projection, plan, ",", NULL, 0);
        %}))=0){%
    }

    /// TODO: key has overloaded meaning here to mean table; we need to
    // increment something somewhere
    if(plan->outputKey && plan->outputKey->insert) {
        %}{{ plan->outputKey->insert->v.string_literal }}{%
    } else if(plan->outputKey && plan->outputKey->is_cross_reference_key) {
        %} ^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}"{%
        %},{%
        TMPL(tmpl_column_list_combine, plan->projection, plan, ",", NULL, 0);
        %})=""
    {% // White space needed
        TMPL(print_dots, dot_count);
        %}IF $INCREMENT(^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}"{%
        %})),$INCREMENT(^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}",{%
        // Temporarily sever the key from the projection
        lp_temp = plan->projection->v.operand[1];
        plan->projection->v.operand[1] = NULL;
        TMPL(tmpl_column_list_combine, plan->projection, plan, ",", NULL, 0);
        plan->projection->v.operand[1] = lp_temp;
        %})) {%
    } else if(plan->set_operation == PP_EXCEPT_SET) {
        %} SET v=$ORDER(^|"{{ config->global_directory }}"|{{ config->global_names.raw_cursor }}(cursorId,"index",{% TMPL(tmpl_column_list_combine, plan->projection, plan, ",", NULL, 0); %},"")) KILL:v'="" {% TMPL(tmpl_key, plan->outputKey); buff_ptr--; %},v),^|"{{ config->global_directory }}"|{{ config->global_names.raw_cursor }}(cursorId,"index",{% TMPL(tmpl_column_list_combine, plan->projection, plan, ",", NULL, 0); %},v){%
    } else if(plan->outputKey) {
        // Note down where we are, do a dummy assignment to increment the row count, then paste our row again
        end_resume = buff_ptr;
        %}&$INCREMENT({% TMPL(tmpl_key, plan->outputKey); %}) {%
        if(plan->set_operation == PP_INTERSECT_SET) {
            %}%%ydboctoz{%
        } else {
            %}%%ydboctoz=42{%
        }
        c = *end_resume;
        *end_resume = '\0';
        resume_length = end_resume - start_resume;
        buff_ptr += snprintf(buff_ptr, buffer_len - (buff_ptr - buffer), "\n%s ", start_resume);
        *end_resume = c;
        start_resume = buff_ptr - resume_length;
        // Track the output of the table so we can copy-paste it instead of repeating the below logic
        start_table_reference = buff_ptr;
        TMPL(tmpl_key, plan->outputKey);
        // Go back on in the buffer
        buff_ptr -= 1;
        if(plan->set_operation == PP_INTERSECT_SET) {
            // Do nothing; we're interested in the index, not the values themselves
            // Kill a non existent variable so we can logic consice
            assert(plan->action_type == PP_DELETE);
            /// TODO: rework this so this fake kill doesn't have to happen
            %},"this variable should never exist"){%
        } else if(plan->action_type == PP_DELETE) {
            %},^|"{{ config->global_directory }}"|{{ config->global_names.raw_cursor }}(cursorId,"index",{%
            TMPL(tmpl_column_list_combine, plan->projection, plan, ",", NULL, 0);
            %})){%
        } else if(plan->stash_columns_in_keys) {
            %},{%
            TMPL(tmpl_column_list_combine, plan->projection, plan, ",", NULL, 0);
            %}){%
        } else if (plan->order_by) {
            %},{%
            TMPL(tmpl_column_list_combine, plan->order_by, plan, ",", NULL, 0);
            %}){%
        } else {
            %},{% TMPL(tmpl_key, plan->outputKey);%}){%
        }
        // Then assign value
        if(plan->action_type == PP_PROJECT) {
            end_table_reference = buff_ptr;
            %}=$GET({%
            c = *end_table_reference,
            *end_table_reference = '\0';
            buff_ptr += snprintf(buff_ptr, buffer_len - (buff_ptr - buffer), "%s", start_table_reference);
            *end_table_reference = c;
            %})_{%
            end_resume = buff_ptr;
            if(plan->stash_columns_in_keys) {
                %}""{%
            } else {
                TMPL(tmpl_column_list_combine, plan->projection, plan, "_\"|\"_", start_resume, end_resume - start_resume);
            }
        }
    } else if (plan->outputTable) {
        /// TODO: do we ever get to this branch?
        // We are putting the value directly into a table
    } else {
        assert(FALSE);
    }

    // If we are maintaing the columnwise index
    if(plan->maintain_columnwise_index && plan->set_operation != PP_EXCEPT_SET) {
        // Newline for the M code
        %}
    {%
        TMPL(print_dots, dot_count);
        if(plan->set_operation == PP_INTERSECT_SET) {
            %}KILL:1{%
        } else {
            %}SET:1{%
        }


        if(plan->where && plan->where->v.operand[0]) {
            %}&({%
            TMPL(tmpl_print_expression, plan->where->v.operand[0], plan);
            %}){%
        }
        // Distinct values if needed
        //  NOTE: the EXCEPT set doesn't need to check if a value exists before clearing it
        if(plan->distinct_values && plan->set_operation != PP_EXCEPT_SET && plan->set_operation != PP_INTERSECT_SET) {
            %}&($DATA(^|"{{ config->global_directory }}"|{{ config->global_names.raw_cursor }}(cursorId,"index",{%
            TMPL(tmpl_column_list_combine, plan->projection, plan, ",", NULL, 0);
            %}))=0){%
        }
        %} ^|"{{ config->global_directory }}"|{{ config->global_names.raw_cursor }}(cursorId,"index",{%
        TMPL(tmpl_column_list_combine, plan->projection, plan, ",", NULL, 0);
        if(plan->set_operation != PP_INTERSECT_SET) {
            %},{% TMPL(tmpl_key, plan->outputKey); %})="",tmpVar=$INCREMENT(^|"{{ config->global_directory }}"|{{ config->global_names.raw_cursor }}(cursorId,"index",{% TMPL(tmpl_column_list_combine, plan->projection, plan, ",", NULL, 0); %})){%
        } else {
            %}){%
        }
    }
    // If this is a INTERSECT set, we need to delete any keys remaining in the
    //  the index; these were in the first set, but not the second
    if(plan->set_operation == PP_INTERSECT_SET) {
        %}
    SET var="^|""{{ config->global_directory }}""|{{ config->global_names.raw_cursor }}("_cursorId_",""index"")" FOR  SET var=$Q(@var),var=$Q(@var) QUIT:$PIECE(var,",",2)'="""index"""  DO
    . SET index=$PIECE($PIECE(var,",",$L(var,",")),")",1),^index($i(dsfasf))=index
    . KILL:index'="" {%
    TMPL(tmpl_key, plan->outputKey);
    // Go back on in the buffer
    buff_ptr -= 1;
    %},index){%
    }
    if(plan->outputKey && plan->outputKey->is_cross_reference_key) {
    %}
    SET ^|"{{ config->global_directory }}"|{{ config->global_names.raw_octo }}("xref_status","{{ tableName }}","{{ columnName }}")="done"
    LOCK -^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}"){%
    } else if(plan->next) {
        next_plan = plan->next;
        while(next_plan->outputKey && next_plan->outputKey->is_cross_reference_key) {
            next_plan = next_plan->next;
        }
        %}
    DO {{ next_plan->plan_name }}(cursorId){%
    }
    %}
    QUIT{%

    // If this is a cross reference key, put the trigger definitions here
    if(plan->outputKey && plan->outputKey->is_cross_reference_key) {
    %}
handleSet
    NEW t
    IF $ZTRIGGEROP="K" DO
    . SET val=""
    . FOR  SET val=$ORDER(^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}",val)) QUIT:val=""  DO:$DATA(^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}",val{%
        lp_temp = plan->projection->v.operand[1];
        i = 0;
        while(lp_temp != NULL) {
            %},sub{{ i|%d }}{%
            lp_temp = lp_temp->v.operand[1];
            i++;
        }
        %}))'=0
    . . KILL ^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}",val{%
        lp_temp = plan->projection->v.operand[1];
        i = 0;
        while(lp_temp != NULL) {
            %},sub{{ i|%d }}{%
            lp_temp = lp_temp->v.operand[1];
            i++;
        }
        %})
    . . KILL:$INCREMENT(^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}",val),-1)=0 ^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}",val)
    . . KILL:$INCREMENT(^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}"),-1)=0 ^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}")
    ELSE  DO
    . SET newValue=$PIECE($ZTVALUE,$ZTDELIM,$ZTUPDATE)
    . SET oldValue=$PIECE($ZTOLDVAL,$ZTDELIM,$ZTUPDATE)
    . KILL:oldValue'="" ^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}",oldValue{%
        lp_temp = plan->projection->v.operand[1];
        i = 0;
        while(lp_temp != NULL) {
            %},sub{{ i|%d }}{%
            lp_temp = lp_temp->v.operand[1];
            i++;
        }
        %}){%
        // Now decrement the counts for the globals
    %}
    . IF oldValue'="" IF $SELECT($INCREMENT(^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}",oldValue),-1):$INCREMENT(^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}"),-1),1:$INCREMENT(^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}"),-1))
    . KILL:(oldValue'="")&(^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}",oldValue)=0) ^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}",oldValue)
    . SET:newValue'="" ^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}",newValue{%
        lp_temp = plan->projection->v.operand[1];
        i = 0;
        while(lp_temp != NULL) {
            %},sub{{ i|%d }}{%
            lp_temp = lp_temp->v.operand[1];
            i++;
        }
        %})=""{%
        // Now decrement the counts for the globals
    %}
    . IF newValue'="" IF $SELECT($INCREMENT(^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}",newValue)):$INCREMENT(^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}")),1:$INCREMENT(^|"{{ config->global_directory }}"|{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}")))
    QUIT{%
    }
    TEMPLATE_END();
}
%}
