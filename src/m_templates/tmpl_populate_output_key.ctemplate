{}%
/****************************************************************
 *								*
 * Copyright (c) 2019-2020 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "physical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_populate_output_key, PhysicalPlan *plan, int dot_count) {
	TEMPLATE_INIT();

	boolean_t	stash_columns_in_keys;

	assert(NULL != plan->outputKey);
	assert(!plan->outputKey->is_cross_reference_key);	/* caller should have ensured this */
	// Populate records in the output key (i.e. SELECT column list)
	%{}`n{{ PLAN_LINE_START }}{}%
	dot_count++;
	TMPL(tmpl_print_dots, dot_count);
	/* If the plan has an ORDER BY, then we need to fill in the ORDER_BY_SUBSCRIPT node even if the plan is part of
	 * a sub-query (i.e. plan->stash_columns_in_keys is TRUE) hence the "&&" check below. In this case, the actual stashing
	 * of the columns in keys will happen as part of the final ORDER BY processing in "tmpl_physical_plan".
	 */
	stash_columns_in_keys = (plan->stash_columns_in_keys && (NULL == plan->order_by));
	if (!stash_columns_in_keys) {
		%{}SET:1{}%
		%{}&$INCREMENT({}%
		TMPL(tmpl_key, plan->outputKey);
		%{}){}%
	} else {
		LogicalPlan	*column_list, *where, *first_operand;

		%{}IF $INCREMENT({}%
		TMPL(tmpl_key, plan->outputKey);
		(*buffer_index)--;
		%{},{}%
		column_list = plan->projection;
		TMPL(tmpl_column_list_combine, column_list, plan, ",", FALSE, 0, 0, 0);
		%{}){}%
		/* Since "stash_columns_in_keys" is TRUE, this is a sub-query. Check if the SELECT column list for this
		 * sub-query is being inherited from a child sub-query that in turn stashed its columns in keys. If so,
		 * it is not enough to just increment the stashed key by 1. Need to increment it by exactly the count that
		 * the we inherited from the child sub-query. This is done by supplying the inherited count as the increment
		 * to $INCREMENT.
		 */
		GET_LP(where, column_list, 0, LP_WHERE);
		assert(NULL == column_list->v.lp_default.operand[1]);	/* Since this is a sub-query that is stashing its select
									 * column list in keys, we expect only ONE column.
									 */
		first_operand = where->v.lp_default.operand[0];
		if (LP_DERIVED_COLUMN == first_operand->type) {
			LogicalPlan	*key;
			PhysicalPlan	*child_plan;
			int		save_unique_id;
			SqlKey		*outputKey;

			GET_LP(key, first_operand, 0, LP_KEY);
			child_plan = get_physical_plan_from_unique_id(plan, key->v.lp_key.key->unique_id);
			if (child_plan->stash_columns_in_keys) {
				/* It is possible "child_plan" is the result of a SET operation. In that case, the output_id
				 * is actually "child_plan->set_oper_list->output_id" and not "child_plan->outputKey->unique_id".
				 * But since "tmpl_key" assumes the latter, modify the latter temporarily if needed.
				 */
				outputKey = child_plan->outputKey;
				/* It is enough if we save "save_unique_id" inside the "if" block. But that causes a
				 * "-Wmaybe-uninitialized" warning due to a C compiler issue. Hence moving it outside.
				 */
				save_unique_id = outputKey->unique_id;
				if (child_plan->set_oper_list) {
					outputKey->unique_id = child_plan->set_oper_list->output_id;
				}
				%{},{}%
				TMPL(tmpl_key, outputKey);
				(*buffer_index)--;
				%{},{}%
				TMPL(tmpl_key, outputKey);
				/* Now that all "tmpl_key" calls are done, reset "outputKey->unique_id" back to what it was */
				if (child_plan->set_oper_list) {
					outputKey->unique_id = save_unique_id;
				}
				%{}){}%
			}
		}
		%{}){}%
	}
	// If this plan has no ORDER BY, then any LIMIT related processing can happen. Otherwise we need to
	// apply the LIMIT after the ORDER BY processing finally happens in "tmpl_physical_plan".
	if (NULL == plan->order_by) {
		SqlOptionalKeyword	*keyword;

		keyword = get_keyword_from_keywords(plan->keywords, OPTIONAL_LIMIT);
		if (NULL != keyword)
		{	/* Need to maintain a local variable parallely with the output key to be used to break from
			 * the FOR loop in case the LIMIT is reached. Cannot use the output key for example if a
			 * UNION is in effect across this plan and another plan in which case both will share the
			 * same output key but could have differing limits (#269).
			 */
			%{}&$INCREMENT(%%ydboctozlimit({{ plan->outputKey->unique_id|%d }})){}%
		}
	}
	if (!stash_columns_in_keys) {
		int	start_output_key, end_output_key;

		%{} %%ydboctoz=42`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		%{}SET {}%
		/* Track the output key (we need it later in "tmpl_column_list_combine" in case we are about
		 * to exceed the maximum M line length. This output key will be used to split the M SET command
		 * across multiple M lines.
		 */
		start_output_key = *buffer_index;
		TMPL(tmpl_key, plan->outputKey);
		(*buffer_index)--;
		if (NULL != plan->order_by) {
			%{},{{ ORDER_BY_SUBSCRIPT }},{}%
			TMPL(tmpl_column_list_combine, plan->order_by, plan, ",", FALSE, 0, 0, 0);
			%{},{}%
			TMPL(tmpl_key, plan->outputKey);
			%{}){}%
		} else {
			%{},{}%
			TMPL(tmpl_key, plan->outputKey);
			%{}){}%
		}
		end_output_key = *buffer_index;
		%{}={}%
		/* If ORDER BY and stashing columns into keys (i.e. `plan->stash_columns_in_keys` is TRUE even though
		 *	`stash_columns_in_keys` is FALSE), do not do `str2mval` transformation as we will keep the column as is
		 *	for later retrieval from parent query.
		 * Else (i.e. `plan->stash_columns_in_keys` is FALSE and `stash_columns_in_keys` is FALSE), we do want to do
		 *	`str2mval` transformation.
		 * Hence `!plan->stash_columns_in_keys` passed below as the 4th parameter (`str2mval`).
		 */
		TMPL(tmpl_column_list_combine, plan->projection, plan, "_", !plan->stash_columns_in_keys,
					start_output_key, end_output_key - start_output_key, dot_count);
	}
	if (!plan->distinct_values) {
		/* If we are being called here through `tmpl_group_by`, then we don't need to worry about `tmpl_duplication_check`
		 * as the output key is being populated from the GROUP BY subscript (`%ydboctog`) which has already aggregated
		 * the results across DNF plans (if any) and hence already accounted for duplicates. In that case though,
		 * `plan->tablejoin_body_group_by_done` would be TRUE hence the `!` check below.
		 */
		if (!plan->tablejoin_body_group_by_done && plan->emit_duplication_check) {
			%{}`n{{ PLAN_LINE_START }}{}%
			TMPL(tmpl_print_dots, dot_count);
			%{}SET {}%
			TMPL(tmpl_duplication_check, plan);
			%{}=1{}%
		}
	} else {
		// Do DISTINCT processing
		%{}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		%{}SET:1{}%
		%{} %%ydboctozdistinct({{ plan->outputKey->unique_id|%d }},{}%
		TMPL(tmpl_column_list_combine, plan->projection, plan, ",", FALSE, 0, 0, 0);
		%{})=""{}%
	}
	TEMPLATE_END();
}
%{}
