#################################################################
#								#
# Copyright (c) 2019 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  if [[ @YDB_TLS_AVAILABLE@ -eq 1 ]]; then
    init_tls
  fi
  load_fixture names.sql
  load_fixture names.zwr
  load_fixture pastas.sql
  load_fixture pastas.zwr
  load_fixture default_user.zwr
  start_rocto 1339
  sleep 1
}

teardown() {
  stop_rocto
}

@test "test no MD5 authentication failure" {
  run_psql 1339 <<OCTO 2>&1 | tee output.txt
SELECT * FROM names;
OCTO
    [[ ! "$(cat results.log)" =~ "read failure: failed to read MD5 password" ]]
}

@test "select wildcard columns" {
  run_psql 1339 <<OCTO 2>&1 | tee output.txt
SELECT * FROM names;
OCTO
  [[ "$(grep -c -E "Zero.\+|Cool" output.txt)" == "2" ]]
}

@test "select lastName only (empty row+column check)" {
  run_psql 1339 <<OCTO 2>&1 | tee output.txt
SELECT lastName FROM names;
OCTO
  verify_output T0011 output.txt
}

@test "select two empty columns only (empty row+column check)" {
  run_psql 1339 <<OCTO 2>&1 | tee output.txt
SELECT lastName, favoritePasta FROM names4;
OCTO
  verify_output T0012 output.txt
}

@test "invalid syntax should get an error message" {
  run_psql 1339 <<OCTO 2>&1 | tee output.txt
SELECT * AFRO names;
OCTO
  [[ "$(grep -c -E "syntax error" output.txt)" == "1" ]]
}

@test "ensure correct columns are sent using xref" {
  run_psql 1339 <<OCTO 2>&1 | tee output.txt
SELECT * FROM names WHERE firstName = "Zero";
OCTO
  [[ "$(grep -c -E "0.+Zero.+Cool" output.txt)" == "1" ]]
}

@test "use_dns config option false" {
  stop_rocto
  run sed -i '/rocto: {/a use_dns: false;' octo.conf
  if [[ $status -ne 0 ]]; then
    echo "rocto: { use_dns: false; }" > octo.conf
  fi
  start_rocto 1339
  sleep 5
  run_psql 1339 <<OCTO 2>&1 | tee output.txt
SELECT * FROM names WHERE firstName = "Zero";
OCTO
  [[ $(grep -c "127.0.0.1" rocto.log) -ge 1 ]]
}

@test "use_dns config option true" {
  stop_rocto
  run sed -i '/rocto: {/a use_dns: true;' octo.conf
  if [[ $status -ne 0 ]]; then
    echo "rocto: { use_dns: true; }" > octo.conf
  fi
  start_rocto 1339
  sleep 5
  run_psql 1339 <<OCTO 2>&1 | tee output.txt
SELECT * FROM names WHERE firstName = "Zero";
OCTO
  [[ $(grep -c "localhost" rocto.log) -ge 1 ]]
}

@test "verify that dead procs don't become zombies" {
  run_psql 1339 <<OCTO 2>&1 | tee output.txt
SELECT * FROM names;
OCTO
  # Sleep for a moment so rocto has time to clean the PID
  sleep 1s
  [[ $(ps -ef | awk '$3 == '`cat rocto.pid`' { print $0;}' | wc -l) -eq 0 ]]
}

@test "ensure error message when YDB_TLS_AVAILABLE not set and ssl_on is set " {
  if [[ @YDB_TLS_AVAILABLE@ -ne 0 ]]; then
    skip "YDB_TLS_AVAILABLE is set"
  fi
  stop_rocto
  cat <<OCTO &> octo.conf
rocto: {
	ssl_on: true;
	port: 1339;
}

tls: {
	CAfile: "$test_temp/CA.crt";
	CApath: "$test_temp/";
	OCTOSERVER: {
		format: "PEM";
		cert: "$test_temp/server.crt";
		key: "$test_temp/server.key";
	}
}
OCTO
  run rocto -vv
  [[ "$output" =~ "ERROR" ]]
  [[ "$output" =~ "YottaDB TLS plugin not installed" ]]
}

@test "ensure socket cleanup when rocto process is killed" {
  kill -9 $(cat rocto.pid)
  start_rocto 1339
  log=$(cat rocto.log)
  [[ ! "$log" =~ "System error 98: Address already in use" ]]
}

@test "ensure error message when trying to call an M function in rocto" {
  DDOLAR='$$'
  cp @PROJECT_SOURCE_DIR@/tests/fixtures/USERFUNC1.m .
  run_psql 1339 <<OCTO 2>&1 | tee output.txt
select $DDOLAR^userfunc1(42) from names;
OCTO
  verify_output T0023 output.txt
}

@test "ensure full SQL query is logged (no missing bytes) in rocto and octo log when started with -vv" {
  query="select id from names"
  expectstring="Parsing done for SQL command \[$query\]"
  echo $query > query.sql
  run_psql 1339 < query.sql 2>&1 | tee output.txt
  octo -vv -f query.sql 2>&1 | tee octo.log
  [[ $(grep -c "$expectstring" rocto.log) -eq 1 ]]
  [[ $(grep -c "$expectstring" octo.log) -eq 1 ]]
}
