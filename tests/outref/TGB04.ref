
-- TGB04 : OCTO55 : Test octo -vv and logical plan output for sample GROUP BY query

SELECT DISTINCT 1 + COUNT(n1.id * 2),n1.firstname from names n1 where n1.id IN (SELECT DISTINCT MAX((n2.id % 3) + 4) from names n2 GROUP BY n2.firstname) GROUP BY n1.firstname ORDER BY 2, 1;

[ INFO] PATH:LINENUM DATE TIME : Parsing done for SQL command [SELECT DISTINCT 1 + COUNT(n1.id * 2),n1.firstname from names n1 where n1.id IN (SELECT DISTINCT MAX((n2.id % 3) + 4) from names n2 GROUP BY n2.firstname) GROUP BY n1.firstname ORDER BY 2, 1;]
[ INFO] PATH:LINENUM DATE TIME : Generating SQL for CURSOR_NUM
[ INFO] PATH:LINENUM DATE TIME : Generating M file [./_ydboctoP*.m] (to execute SQL query)
[DEBUG] PATH:LINENUM DATE TIME : LOGICAL_PLAN BEFORE optimize_logical_plan() follows
LP_INSERT: 
  LP_PROJECT: 
    LP_COLUMN_LIST: 
      LP_WHERE: 
        LP_ADDITION: 
          LP_VALUE: 1
          LP_AGGREGATE_FUNCTION_COUNT: 
            LP_COLUMN_LIST: 
              LP_MULTIPLICATION: 
                LP_COLUMN_ALIAS: N1(1).ID
                LP_VALUE: 2
        LP_COLUMN_LIST_ALIAS: 
        - type: NUMERIC_LITERAL
        - alias: COUNT
      LP_COLUMN_LIST: 
        LP_WHERE: 
          LP_COLUMN_ALIAS: N1(1).FIRSTNAME
          LP_COLUMN_LIST_ALIAS: 
          - type: STRING_LITERAL
          - alias: FIRSTNAME
    LP_SELECT: 
      LP_TABLE_JOIN: 
        LP_TABLE: N1
      LP_CRITERIA: 
        LP_KEYS: 
        LP_SELECT_OPTIONS: 
          LP_WHERE: 
            LP_BOOLEAN_IN: 
              LP_COLUMN_ALIAS: N1(1).ID
              LP_INSERT: 
                LP_PROJECT: 
                  LP_COLUMN_LIST: 
                    LP_WHERE: 
                      LP_AGGREGATE_FUNCTION_MAX: 
                        LP_COLUMN_LIST: 
                          LP_ADDITION: 
                            LP_MODULO: 
                              LP_COLUMN_ALIAS: N2(2).ID
                              LP_VALUE: 3
                            LP_VALUE: 4
                      LP_COLUMN_LIST_ALIAS: 
                      - type: NUMERIC_LITERAL
                      - alias: MAX
                  LP_SELECT: 
                    LP_TABLE_JOIN: 
                      LP_TABLE: N2
                    LP_CRITERIA: 
                      LP_KEYS: 
                        LP_KEY: 
                        - table_name: NAMES
                        - column_name: ID
                        - unique_id: 2
                        - method: LP_KEY_ADVANCE
                        - xref_key: false
                        - uses_xref_key: false
                      LP_SELECT_OPTIONS: 
                        LP_WHERE: 
                        LP_SELECT_MORE_OPTIONS: 
                          LP_AGGREGATE_OPTIONS: 
                            LP_GROUP_BY: 
                              LP_COLUMN_LIST: 
                                LP_WHERE: 
                                  LP_COLUMN_ALIAS: N2(2).FIRSTNAME
                                  LP_COLUMN_LIST_ALIAS: 
                                  - type: STRING_LITERAL
                          LP_KEYWORDS:  DISTINCT;
                LP_OUTPUT: 
                  LP_KEY: 
                  - table_name:  
                  - column_name:  
                  - unique_id: 5
                  - method: LP_KEY_ADVANCE
                  - xref_key: false
                  - uses_xref_key: false
          LP_SELECT_MORE_OPTIONS: 
            LP_AGGREGATE_OPTIONS: 
              LP_GROUP_BY: 
                LP_COLUMN_LIST: 
                  LP_WHERE: 
                    LP_COLUMN_ALIAS: N1(1).FIRSTNAME
                    LP_COLUMN_LIST_ALIAS: 
                    - type: STRING_LITERAL
            LP_KEYWORDS:  DISTINCT;
  LP_OUTPUT: 
    LP_KEY: 
    - table_name:  
    - column_name:  
    - unique_id: 6
    - method: LP_KEY_ADVANCE
    - xref_key: false
    - uses_xref_key: false
    LP_ORDER_BY: ORDER BY ASC: 
      LP_COLUMN_LIST: 
        LP_WHERE: 
          LP_COLUMN_ALIAS: N1(1).FIRSTNAME
          LP_COLUMN_LIST_ALIAS: 
          - type: STRING_LITERAL
      LP_ORDER_BY: ORDER BY ASC: 
        LP_COLUMN_LIST: 
          LP_WHERE: 
            LP_ADDITION: 
              LP_VALUE: 1
              LP_AGGREGATE_FUNCTION_COUNT: 
                LP_COLUMN_LIST: 
                  LP_MULTIPLICATION: 
                    LP_COLUMN_ALIAS: N1(1).ID
                    LP_VALUE: 2
            LP_COLUMN_LIST_ALIAS: 
            - type: NUMERIC_LITERAL

[DEBUG] PATH:LINENUM DATE TIME : LOGICAL_PLAN AFTER optimize_logical_plan() follows
LP_INSERT: 
  LP_PROJECT: 
    LP_COLUMN_LIST: 
      LP_WHERE: 
        LP_ADDITION: 
          LP_VALUE: 1
          LP_AGGREGATE_FUNCTION_COUNT: 
            LP_COLUMN_LIST: 
              LP_MULTIPLICATION: 
                LP_COLUMN_ALIAS: N1(1).ID
                LP_VALUE: 2
        LP_COLUMN_LIST_ALIAS: 
        - type: NUMERIC_LITERAL
        - alias: COUNT
      LP_COLUMN_LIST: 
        LP_WHERE: 
          LP_COLUMN_ALIAS: N1(1).FIRSTNAME
          LP_COLUMN_LIST_ALIAS: 
          - type: STRING_LITERAL
          - alias: FIRSTNAME
    LP_SELECT: 
      LP_TABLE_JOIN: 
        LP_TABLE: N1
      LP_CRITERIA: 
        LP_KEYS: 
          LP_KEY: 
          - table_name: NAMES
          - column_name: ID
          - unique_id: 1
          - method: LP_KEY_ADVANCE
          - xref_key: false
          - uses_xref_key: false
        LP_SELECT_OPTIONS: 
          LP_WHERE: 
            LP_BOOLEAN_IN: 
              LP_COLUMN_ALIAS: N1(1).ID
              LP_INSERT: 
                LP_PROJECT: 
                  LP_COLUMN_LIST: 
                    LP_WHERE: 
                      LP_AGGREGATE_FUNCTION_MAX: 
                        LP_COLUMN_LIST: 
                          LP_ADDITION: 
                            LP_MODULO: 
                              LP_COLUMN_ALIAS: N2(2).ID
                              LP_VALUE: 3
                            LP_VALUE: 4
                      LP_COLUMN_LIST_ALIAS: 
                      - type: NUMERIC_LITERAL
                      - alias: MAX
                  LP_SELECT: 
                    LP_TABLE_JOIN: 
                      LP_TABLE: N2
                    LP_CRITERIA: 
                      LP_KEYS: 
                        LP_KEY: 
                        - table_name: NAMES
                        - column_name: ID
                        - unique_id: 2
                        - method: LP_KEY_ADVANCE
                        - xref_key: false
                        - uses_xref_key: false
                      LP_SELECT_OPTIONS: 
                        LP_WHERE: 
                        LP_SELECT_MORE_OPTIONS: 
                          LP_AGGREGATE_OPTIONS: 
                            LP_GROUP_BY: 
                              LP_COLUMN_LIST: 
                                LP_WHERE: 
                                  LP_COLUMN_ALIAS: N2(2).FIRSTNAME
                                  LP_COLUMN_LIST_ALIAS: 
                                  - type: STRING_LITERAL
                          LP_KEYWORDS:  DISTINCT;
                LP_OUTPUT: 
                  LP_KEY: 
                  - table_name:  
                  - column_name:  
                  - unique_id: 5
                  - method: LP_KEY_ADVANCE
                  - xref_key: false
                  - uses_xref_key: false
          LP_SELECT_MORE_OPTIONS: 
            LP_AGGREGATE_OPTIONS: 
              LP_GROUP_BY: 
                LP_COLUMN_LIST: 
                  LP_WHERE: 
                    LP_COLUMN_ALIAS: N1(1).FIRSTNAME
                    LP_COLUMN_LIST_ALIAS: 
                    - type: STRING_LITERAL
            LP_KEYWORDS:  DISTINCT;
  LP_OUTPUT: 
    LP_KEY: 
    - table_name:  
    - column_name:  
    - unique_id: 6
    - method: LP_KEY_ADVANCE
    - xref_key: false
    - uses_xref_key: false
    LP_ORDER_BY: ORDER BY ASC: 
      LP_COLUMN_LIST: 
        LP_WHERE: 
          LP_COLUMN_ALIAS: N1(1).FIRSTNAME
          LP_COLUMN_LIST_ALIAS: 
          - type: STRING_LITERAL
      LP_ORDER_BY: ORDER BY ASC: 
        LP_COLUMN_LIST: 
          LP_WHERE: 
            LP_ADDITION: 
              LP_VALUE: 1
              LP_AGGREGATE_FUNCTION_COUNT: 
                LP_COLUMN_LIST: 
                  LP_MULTIPLICATION: 
                    LP_COLUMN_ALIAS: N1(1).ID
                    LP_VALUE: 2
            LP_COLUMN_LIST_ALIAS: 
            - type: NUMERIC_LITERAL

[ INFO] PATH:LINENUM DATE TIME : print_temporary_table()
2|Joey
2|Zero
[ INFO] PATH:LINENUM DATE TIME : Parsing done for SQL command []

;; This is a generated file; do not modify. Generated M code corresponds to below SQL query
;; ---------------------------------------------------------
;  SELECT DISTINCT 1 + COUNT(n1.id * 2),n1.firstname from names n1 where n1.id IN (SELECT DISTINCT MAX((n2.id % 3) + 4) from names n2 GROUP BY n2.firstname) GROUP BY n1.firstname ORDER BY 2, 1;
;; ---------------------------------------------------------

octoPlan0(cursorId)
    DO octoPlan1(cursorId)
    DO octoPlan2(cursorId)
    QUIT

octoPlan1(cursorId)
    NEW %ydboctoz KILL %ydboctocursor(cursorId,"keys",5,"","")
    SET %ydboctocursor(cursorId,"keys",2,"NAMES","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",2,"NAMES","ID")=$ORDER(^names(%ydboctocursor(cursorId,"keys",2,"NAMES","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",2,"NAMES","ID")="")  DO
    . IF 1 DO
    . . NEW %ydboctog,%ydboctop
    . . SET %ydboctog=$PIECE($GET(^names(%ydboctocursor(cursorId,"keys",2,"NAMES","ID"))),"|",2)
    . . SET %ydboctocursor(cursorId,"keys",5,"","","GroupBy",%ydboctog)=""
    . . SET %ydboctop=((%ydboctocursor(cursorId,"keys",2,"NAMES","ID")#$GET(%ydboctocursor(cursorId,"parameters",3)))+$GET(%ydboctocursor(cursorId,"parameters",4)))
    . . DO Max^%ydboctoplanhelpers(5,%ydboctog,1,%ydboctop,0)
    NEW %ydboctog SET %ydboctog=""
    FOR  DO:$DATA(%ydboctocursor(cursorId,"keys",5,"","","GroupBy",%ydboctog))  SET %ydboctog=$ORDER(%ydboctocursor(cursorId,"keys",5,"","","GroupBy",%ydboctog)) QUIT:(""=%ydboctog)
    . IF 1&($DATA(%ydboctocursor(cursorId,"Distinct",$GET(%ydboctocursor(cursorId,"keys",5,"","","GroupBy",%ydboctog,1))))=0) DO
    . . IF $INCREMENT(%ydboctocursor(cursorId,"keys",5,"",""))
    . . IF $INCREMENT(%ydboctocursor(cursorId,"keys",5,"","",$GET(%ydboctocursor(cursorId,"keys",5,"","","GroupBy",%ydboctog,1))))
    . . SET:1 %ydboctocursor(cursorId,"Distinct",$GET(%ydboctocursor(cursorId,"keys",5,"","","GroupBy",%ydboctog,1)),%ydboctocursor(cursorId,"keys",5,"",""))="",tmpVar=$INCREMENT(%ydboctocursor(cursorId,"Distinct",$GET(%ydboctocursor(cursorId,"keys",5,"","","GroupBy",%ydboctog,1))))
    KILL %ydboctocursor(cursorId,"keys",5,"","","GroupBy")
    KILL %ydboctocursor(cursorId,"Distinct")
    QUIT

octoPlan2(cursorId)
    NEW %ydboctoz KILL %ydboctocursor(cursorId,"keys",6,"","")
    SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=$ORDER(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"NAMES","ID")="")  DO
    . IF 1&(($DATA(%ydboctocursor(cursorId,"keys",5,"","",%ydboctocursor(cursorId,"keys",1,"NAMES","ID")))'=0)) DO
    . . NEW %ydboctog,%ydboctop
    . . SET %ydboctog=$PIECE($GET(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))),"|",2)
    . . SET %ydboctocursor(cursorId,"keys",6,"","","GroupBy",%ydboctog)=""
    . . SET %ydboctop=(%ydboctocursor(cursorId,"keys",1,"NAMES","ID")*$GET(%ydboctocursor(cursorId,"parameters",2)))
    . . DO Count^%ydboctoplanhelpers(6,%ydboctog,2,%ydboctop)
    . . SET %ydboctop=(%ydboctocursor(cursorId,"keys",1,"NAMES","ID")*$GET(%ydboctocursor(cursorId,"parameters",2)))
    . . DO Count^%ydboctoplanhelpers(6,%ydboctog,1,%ydboctop)
    NEW %ydboctog SET %ydboctog=""
    FOR  DO:$DATA(%ydboctocursor(cursorId,"keys",6,"","","GroupBy",%ydboctog))  SET %ydboctog=$ORDER(%ydboctocursor(cursorId,"keys",6,"","","GroupBy",%ydboctog)) QUIT:(""=%ydboctog)
    . IF 1&($DATA(%ydboctocursor(cursorId,"Distinct",($GET(%ydboctocursor(cursorId,"parameters",1))+$GET(%ydboctocursor(cursorId,"keys",6,"","","GroupBy",%ydboctog,1),0)),$PIECE(%ydboctog,"|",1)))=0) DO
    . . SET:1&$INCREMENT(%ydboctocursor(cursorId,"keys",6,"","")) %ydboctoz=42
    . . SET %ydboctocursor(cursorId,"keys",6,"","","OrderBy","Z"_$PIECE(%ydboctog,"|",1),($GET(%ydboctocursor(cursorId,"parameters",1))+$GET(%ydboctocursor(cursorId,"keys",6,"","","GroupBy",%ydboctog,2),0)),%ydboctocursor(cursorId,"keys",6,"",""))=($GET(%ydboctocursor(cursorId,"parameters",1))+$GET(%ydboctocursor(cursorId,"keys",6,"","","GroupBy",%ydboctog,1),0))_"|"_$PIECE(%ydboctog,"|",1)
    . . SET:1 %ydboctocursor(cursorId,"Distinct",($GET(%ydboctocursor(cursorId,"parameters",1))+$GET(%ydboctocursor(cursorId,"keys",6,"","","GroupBy",%ydboctog,1),0)),$PIECE(%ydboctog,"|",1),%ydboctocursor(cursorId,"keys",6,"",""))="",tmpVar=$INCREMENT(%ydboctocursor(cursorId,"Distinct",($GET(%ydboctocursor(cursorId,"parameters",1))+$GET(%ydboctocursor(cursorId,"keys",6,"","","GroupBy",%ydboctog,1),0)),$PIECE(%ydboctog,"|",1)))
    KILL %ydboctocursor(cursorId,"keys",6,"","","GroupBy")
    NEW %ydboctoi  SET %ydboctoi(0)=1
    SET %ydboctoi(1)="" FOR  DO:$DATA(%ydboctocursor(cursorId,"keys",6,"","","OrderBy",%ydboctoi(1)))  SET %ydboctoi(1)=$ORDER(%ydboctocursor(cursorId,"keys",6,"","","OrderBy",%ydboctoi(1)),1)  QUIT:(%ydboctoi(1)="")
    . SET %ydboctoi(2)="" FOR  DO:$DATA(%ydboctocursor(cursorId,"keys",6,"","","OrderBy",%ydboctoi(1),%ydboctoi(2)))  SET %ydboctoi(2)=$ORDER(%ydboctocursor(cursorId,"keys",6,"","","OrderBy",%ydboctoi(1),%ydboctoi(2)),1)  QUIT:(%ydboctoi(2)="")
    . . SET %ydboctoi(3)="" FOR  SET %ydboctoi(3)=$ORDER(%ydboctocursor(cursorId,"keys",6,"","","OrderBy",%ydboctoi(1),%ydboctoi(2),%ydboctoi(3))) QUIT:(%ydboctoi(3)="")  DO
    . . . SET %ydboctocursor(cursorId,"keys",6,"","",%ydboctoi(0))=%ydboctocursor(cursorId,"keys",6,"","","OrderBy",%ydboctoi(1),%ydboctoi(2),%ydboctoi(3))
    . . . IF $INCREMENT(%ydboctoi(0))
    KILL %ydboctocursor(cursorId,"keys",6,"","","OrderBy")
    SET %ydboctocursor(cursorId,"keys",6,"","")=%ydboctoi(0)-1
    KILL %ydboctocursor(cursorId,"Distinct")
    QUIT
