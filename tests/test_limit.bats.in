#################################################################
#								#
# Copyright (c) 2019 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
}

@test "select with limit of one row" {
  octo >& output.txt <<OCTO
select * from names limit 1;
OCTO
  run cat output.txt
  ! [[ "$output" =~ "1|Acid|Burn" ]]
}

@test "select with limit of one row from nested query" {
  octo >& output.txt <<OCTO
select * from (select * from names limit 1);
OCTO
  run cat output.txt
  ! [[ "$output" =~ "1|Acid|Burn" ]]
}
@test "select with limit of one on outer statement of join" {
  octo >& output.txt <<OCTO
select * from names n1 INNER JOIN names n2 ON (n1.id = n2.id) WHERE n1.firstName = "Joey" LIMIT 1;
OCTO
  run cat output.txt
  ! [[ "$output" =~ "1|Acid|Burn" ]]
  [[ "$output" =~ "Joey" ]]
}

@test "TL01 : OCTO321 : LIMIT returns more rows than requested if there is a WHERE clause with OR usages" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names where id = 1 or id = 2 limit 1;
OCTO
  verify_output TL01 output.txt
}

@test "TL02 : OCTO299 : Incorrect results from ORDER BY when used with LIMIT" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names order by firstname limit 2;
OCTO
  verify_output TL02 output.txt
}

@test "TL03 : OCTO269a : Verify simple queries without UNION usages but with WHERE/OR usages work fine with LIMIT and/or ORDER BY" {
  load_fixture easynames.sql
  load_fixture easynames.zwr
  cat <<CAT > input.sql
select * from easynames where id = 1 or id = 2 or id = 10 limit 0;
select * from easynames where id = 1 or id = 2 or id = 10 limit 1;
select * from easynames where id = 1 or id = 2 or id = 10 limit 2;
select * from easynames where id = 1 or id = 2 or id = 10 limit 3;
select * from easynames where id = 1 or id = 2 or id = 10 limit 4;
select * from easynames where id = 1 or id = 2 or id = 10 order by name;
select * from easynames where id = 1 or id = 2 or id = 10 order by name limit 0;
select * from easynames where id = 1 or id = 2 or id = 10 order by name limit 1;
select * from easynames where id = 1 or id = 2 or id = 10 order by name limit 2;
select * from easynames where id = 1 or id = 2 or id = 10 order by name limit 3;
select * from easynames where id = 1 or id = 2 or id = 10 order by name limit 4;
CAT
  cat input.sql > output.txt
  octo -f input.sql >> output.txt 2>&1
  verify_output TL03 output.txt
}

@test "OCTO269b : Verify simple queries with UNION usages and optional ORDER BY and optional LIMIT usages" {
  # First test against simple fixed queries; Crosscheck Octo output with Postgres
  yottadb -run genfixedsetqueries^gensetqueries # this generates queries of the form setquery01.sql, setquery02.sql ...
  for file in setquery*.sql
  do
    run_query_in_octo_and_postgres_and_crosscheck names $file "remove_empty_line_at_tail"
  done
}

