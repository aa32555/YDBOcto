#################################################################
#								#
# Copyright (c) 2019-2020 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
	init_test
	createdb
}

sqllogic_test() {
	num=$1
	fraction=$2
	skipped_files="$3"

	if [ "$fraction" = "" ]; then
		fraction=1
	fi

	fixtures=@PROJECT_SOURCE_DIR@/tests/fixtures
	$fixtures/sqllogic/filter.py $num $fraction >/dev/null
	if ! [ -e $fixtures/postgres-sqllogic$num.sql ]; then
		$fixtures/sqllogic/insert.py $num >/dev/null
		# Remove GLOBAL subexpressions from CREATE TABLE statements, since postgres does not understand them.
		sed 's/) GLOBAL .*;$/);/' sqllogic.sql > $fixtures/postgres-sqllogic$num.sql
		# Remove CREATE INDEX, INSERT INTO, and DROP TABLE statements, since Octo does not understand them.
		sed '/^INSERT INTO\|CREATE INDEX\|DROP TABLE/d' sqllogic$num.sql > $fixtures/sqllogic$num.sql
		cp sqllogic$num.zwr $fixtures
	fi
	load_fixture sqllogic$num.sql
	load_fixture sqllogic$num.zwr

	for file in test*.sql
	do
		skip=false
		# The following files use more than 2 GB of memory and cause the pipeline to time out.
		# Skip them for now. These can be re-enabled once Octo uses fewer resources for many-table JOINs.
		for too_big in $skipped_files; do
			if [ test$num.sql = $too_big ]; then
				skip=true
				break
			fi
		done
		if [ $skip = true ]; then
			echo "skipping $file because it uses too much memory"
			continue
		fi
		echo "testing $file"
		run_query_in_octo_and_postgres_and_crosscheck sqllogic$num $file
	done
}

# To keep the test times reasonable, only a random sample of tests are run.
# The percentage of tests is chosen so that tests take approximately the same amount of time to run.
# The tests take the following time at time of writing:
# TS01: 17s
# TS02: 18s
# TS03: 20s
# TS04: 15s
# TS05: 23s
@test "TS01: select1 test cases from https://github.com/shivarajugowda/jdbcSQLTest/blob/master/resources/sqllogictest/select1.test" {
	sqllogic_test 1 .1
}

@test "TS02: select2 test cases from https://github.com/shivarajugowda/jdbcSQLTest/blob/master/resources/sqllogictest/select2.test" {
	sqllogic_test 2 .1
}

@test "TS03: select3 test cases from https://github.com/shivarajugowda/jdbcSQLTest/blob/master/resources/sqllogictest/select3.test" {
	sqllogic_test 3 .03
}

@test "TS04: select4 test cases from https://github.com/shivarajugowda/jdbcSQLTest/blob/master/resources/sqllogictest/select4.test" {
	sqllogic_test 4 .03
}

@test "TS05: select5 test cases from https://github.com/shivarajugowda/jdbcSQLTest/blob/master/resources/sqllogictest/select5.test" {
	sqllogic_test 5 .1
}
