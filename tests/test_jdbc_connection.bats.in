#################################################################
#								#
# Copyright (c) 2019-2020 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  if [[ @YDB_TLS_AVAILABLE@ -eq 1 ]]; then
    init_tls
  fi
  load_fixture names.sql
  load_fixture names.zwr
  load_fixture pastas.sql
  load_fixture pastas.zwr
  create_user $USER "ydbrocks"
  test_port=$(start_rocto 1344)
}

teardown() {
  stop_rocto
}

@test "TJC001 : Random inner/outer join queries" {
  load_fixture customers.sql
  load_fixture customers.zwr
  # 8 below is max # of inner/outer joins in one query
  yottadb -run TOJ03 8	# this generates a set of queries jointest01.sql, jointest02.sql ...
  # Run using psql and Octo against each of the generated queries
  for file in jointest*.sql
  do
    run_query_in_octo_and_postgres_and_crosscheck customers $file "" usejdbc useextended
  done
}

@test "TJC002 : Simple extended query parameter tests" {
  load_fixture customers.sql
  load_fixture customers.zwr
  run_java TJC002 $test_port &> output.txt
  verify_output TJC002 output.txt
}

@test "TJC003 : First character of subsequent select query not consumed" {
  load_fixture customers.sql
  load_fixture customers.zwr
  testname="TJC003"
  # Run using psql and Octo against each of the generated queries
  run_java run_query $test_port $testname useextended &> output.txt
  echo "" >> output.txt
  grep -r elect _ydboctoP*.m | sort >> output.txt
  verify_output $testname output.txt
}

@test "TJC004 : Test Query Generator against customers database" {
  run_query_generator customers TJC04- usejdbc
}

@test "TJC005 : Test Query Generator against pastas database" {
  run_query_generator pastas TJC05- usejdbc
}

@test "TJC006 : Test Query Generator against names database" {
  run_query_generator names TJC06- usejdbc
}

@test "TJC007 : Test Query Generator against northwind database" {
  skip	# This subtest fails due to YDBOcto#320 changes. Will be re-enabled soon.
  run_query_generator northwind TJC07- usejdbc
}

@test "TJC008 : Validate usage of Simple vs. Extended Query protocol using PrepareThreshold" {
  stop_rocto
  test_port=$(start_rocto 1344 verbose)
  load_fixture customers.sql
  load_fixture customers.zwr
  run_java TJC008 $test_port &> output.txt
  # Confirm both simple and extended query were used
  grep "handle_query" rocto.log >> output.txt
  grep "handle_bind" rocto.log >> output.txt
  verify_output TJC008 output.txt psql
}

@test "TJC009 : Octo returns RowDescription for query with no return rows" {
  stop_rocto
  test_port=$(start_rocto 1344 verbose)
  load_fixture names.sql
  load_fixture names.zwr
  testname="TJC009"
  run_query_in_octo_and_postgres_and_crosscheck names $testname.sql "" usejdbc
  grep "Sending message of type T" rocto.log &> output.txt
  verify_output $testname output.txt psql
}

@test "TJC010 : parse_context->is_bind_parm array correctly resizes for large numbers of parameters" {
  stop_rocto
  test_port=$(start_rocto 1344 verbose)
  load_fixture names.sql
  load_fixture names.zwr
  testname="TJC010"
  run_java $testname $test_port &> output.txt
  # Cannot test memory expansion path since JDBC driver specifies parameter types; TPGC005 tests the expansion case
  grep "Memory doubled" rocto.log >> output.txt
  verify_output $testname output.txt psql
}

# TODO: This test is insufficient for fully testing PortalSuspended message handling,
# since the JDBC driver doesn't support it. Accordingly, when a method is identified
# for testing this portion of the PostgreSQL wire protocol, it should be added.
@test "TJC011 : Row limiting with Extended Query" {
  load_fixture customers.sql
  load_fixture customers.zwr
  run_java TJC011 $test_port &> output.txt
  verify_output TJC011 output.txt
}

@test "TJC012 : Pipeline failure from TJC007" {
  # This subtest currently fails (likely due to YDBOcto#320 changes) so is skipped.
  # Can be removed once TJC007 starts passing since that fails 50% of the time or so due to the same underlying issue
  # so no need of a separate (and specific) TJC012 subtest. The generic TJC007 subtest is good enough.
  skip
  load_fixture northwind.sql
  load_fixture northwind.zwr
  run_query_in_octo_and_postgres_and_crosscheck northwind TJC012.sql "" "usejdbc"
}
