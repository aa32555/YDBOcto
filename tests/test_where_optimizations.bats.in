#################################################################
#								#
# Copyright (c) 2019 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
}

@test "TWO01 : simple fixed key optimization" {
  octo >& output.txt <<OCTO
select * from names where id = 2;
OCTO
  # Include generated M code in reference file to verify all optimizations there
  cat _ydboctoP*.m >> output.txt
  verify_output TWO01 output.txt
}

@test "TWO02 : cases that contain OR or AND do not allow optimization to occur" {
  octo >& output.txt <<OCTO
select * from names where id = 2 or firstName = "Zero";
OCTO
  # Include generated M code in reference file to verify all optimizations there
  cat _ydboctoP*.m >> output.txt
  verify_output TWO02 output.txt
}

@test "TWO03 : simple fixed column optimizations" {
  octo >& output.txt <<OCTO
SELECT * FROM names AS t1
CROSS JOIN names AS t2
WHERE t1.id = t2.id;
OCTO
  # Include generated M code in reference file to verify all optimizations there
  cat _ydboctoP*.m >> output.txt
  verify_output TWO03 output.txt
}

@test "TWO04 : fixed value with chained SQL" {
  octo <<OCTO 2>&1 | tee output.txt
select firstName
FROM (
  select * from names as t1
  inner join names as t2
  on t1.id = t2.id
  order by t1.firstName
);
OCTO
  # Include generated M code in reference file to verify all optimizations there
  cat _ydboctoP*.m >> output.txt
  verify_output TWO04 output.txt
}

@test "TWO05 : fixed column optimizations where second column isn't a key" {
  octo >& output.txt <<OCTO
SELECT * FROM namesWithAges AS t1
CROSS JOIN namesWithAges AS t2
WHERE t1.id = t2.age;
OCTO
  # Include generated M code in reference file to verify all optimizations there
  cat _ydboctoP*.m >> output.txt
  verify_output TWO05 output.txt
}

@test "TW006 : fixed column optimizations where first column isn't a key" {
  octo >& output.txt <<OCTO
SELECT * FROM namesWithAges AS t1
CROSS JOIN namesWithAges AS t2
WHERE t1.age = t2.id;
OCTO
  # Include generated M code in reference file to verify all optimizations there
  cat _ydboctoP*.m >> output.txt
  verify_output TWO06 output.txt
}


@test "TWO07 : three way inner join" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT t1.firstName, t2.firstName, t3.firstName
FROM names t1
INNER JOIN names t2
ON t1.id = t2.id
INNER JOIN names t3
ON t2.id = t3.id;
OCTO
  # Include generated M code in reference file to verify all optimizations there
  cat _ydboctoP*.m >> output.txt
  verify_output TWO07 output.txt
}

@test "TWO08 : WHERE with AND of EQUALS and NOT EQUAL - postfix" {
  octo >& output.txt <<OCTO
SELECT * FROM names AS t1
CROSS JOIN names AS t2
WHERE t1.id = t2.id
  AND t1.firstName <> 'Charles'
  AND t2.firstName <> 'Charles'
OCTO
  # Include generated M code in reference file to verify all optimizations there
  cat _ydboctoP*.m >> output.txt
  verify_output TWO08 output.txt
}

@test "TW009 : WHERE with AND of EQUALS and NOT EQUAL - prefix" {
  octo >& output.txt <<OCTO
SELECT * FROM names AS t1
CROSS JOIN names AS t2
WHERE t1.firstName <> 'Charles'
  AND t2.firstName <> 'Charles'
  AND t1.id = t2.id
OCTO
  # Include generated M code in reference file to verify all optimizations there
  cat _ydboctoP*.m >> output.txt
  verify_output TWO09 output.txt
}

@test "TWO10 : WHERE with multiple tables and NOT EQUAL" {
  octo<<OCTO 2>&1 | tee output.txt
SELECT * FROM namesWithAges AS t1
CROSS JOIN namesWithAges AS t2
CROSS JOIN namesWithAges AS t3
CROSS JOIN namesWithAges AS t4
WHERE t1.age <> -1
  AND t1.age <> 5
  AND t1.age = t2.id
  AND t2.id = t3.id;
OCTO
  # Include generated M code in reference file to verify all optimizations there
  cat _ydboctoP*.m >> output.txt
  verify_output TWO10 output.txt
}

@test "TW011 : WHERE with disjunction" {
  octo -vv <<OCTO > output.txt 2> plan.txt
SELECT *
FROM names
WHERE firstName = 'Zero' OR lastName = 'Cool'
OCTO
  [[ $(grep -c "LP_KEY_FIX" plan.txt) -eq 2 ]]
  # Include generated M code in reference file to verify all optimizations there
  cat _ydboctoP*.m >> output.txt
  verify_output TWO11 output.txt
}

@test "TWO12 : complicated WHERE with disjunction and multiple nested levels" {
  octo -vv <<OCTO > output.txt 2> plan.txt
SELECT *
FROM names
WHERE (id = 0 OR id = 5) AND (firstName = 'Zero' OR lastName = 'Cool')
OCTO
  [[ $(grep -c "LP_KEY_FIX" plan.txt) -eq 4 ]]
  # Include generated M code in reference file to verify all optimizations there
  cat _ydboctoP*.m >> output.txt
  verify_output TWO12 output.txt
}

@test "TWO13 : complicated WHERE with disjunction and multiple nested levels of ANDs" {
  octo -vv <<OCTO > output.txt 2> plan.txt
SELECT *
FROM names
WHERE ((id = 0 AND firstName = 'Zero') OR id = 5)
  AND ((lastName = 'Cool' AND firstName = 'Zero') OR lastName = 'Cool')
OCTO
  [[ $(grep -c "LP_KEY_FIX" plan.txt) -eq 4 ]]
  # Include generated M code in reference file to verify all optimizations there
  cat _ydboctoP*.m >> output.txt
  verify_output TWO13 output.txt
}

@test "TWO14 : [NOT] LIKE with integer cast" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names where id like 4::integer;
select * from names where id not like 4::integer;
OCTO
  # Include generated M code in reference file to verify all optimizations there
  cat _ydboctoP*.m >> output.txt
  verify_output TWO14 output.txt
}

@test "TWO15 : #307 : WHERE with primary-key-column = primary-key-column" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names where id = id;
OCTO
  # Include generated M code in reference file to verify all optimizations there
  cat _ydboctoP*.m >> output.txt
  verify_output TWO15 output.txt
}

@test "TWO16 : WHERE GREATER_THAN_OR_EQUAL passed lp_verify_structure" {
  cat <<CAT > input.sql
select * from names where id >= 1;
select * from names where id >= 1 and id < 3;
select * from names where id < 3 and id >= 1;
select * from names where id >= 1 and id <= 4;
select * from names where id <= 4 and id >= 1;
select * from names where id >= 1 or id < 5;
select * from names where id >= 1 or id <= 5;
CAT
  cat input.sql > output.txt
  octo -f input.sql >> output.txt 2>&1
  verify_output TWO16 output.txt
}

@test "TWO17 : WHERE [NOT] LIKE '%'" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names where firstname like "%";
select * from names where firstname like "%%%%%%";
select * from names where firstname not like "%";
select * from names where firstname not like "%%%%%%";
OCTO
  run grep "regmatch" _ydboctoP*.m
  [[ $status -eq 1 ]]
  cat _ydboctoP*.m >> output.txt
  verify_output TWO17 output.txt
}

@test "TWO18 : WHERE [!]~[*] '.*'" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names where firstname ~ ".*";
select * from names where firstname ~ ".*.*.*.*";
select * from names where firstname !~ ".*";
select * from names where firstname !~ ".*.*.*.*";
select * from names where firstname ~* ".*";
select * from names where firstname ~* ".*.*.*.*";
select * from names where firstname !~* ".*";
select * from names where firstname !~* ".*.*.*.*";
OCTO
  run grep "regmatch" _ydboctoP*.m
  [[ $status -eq 1 ]]
  cat _ydboctoP*.m >> output.txt
  verify_output TWO18 output.txt
}

@test "TWO19 : WHERE [NOT] LIKE '%%abc%%" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names where firstname like "%%abc%%";
select * from names where firstname not like "%%abc%%";
OCTO
  run grep "regmatch" _ydboctoP*.m
  [[ $status -eq 0 ]]
  cat _ydboctoP*.m >> output.txt
  verify_output TWO19 output.txt
}
