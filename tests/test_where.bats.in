#################################################################
#								#
# Copyright (c) 2019-2020 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
}

@test "TW00 :where with string limits return values" {
  run octo <<OCTO
select * from names where firstName = "Zero";
OCTO
  [[ "$output" =~ "Zero|Cool" ]]
  ! [[ "$output" =~ "Joey" ]]
}

@test "TW01 :where with invalid comparisons should return an error" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names where firstName = 5;
OCTO
  run cat output.txt
  [[ "$output" =~ "ERROR" ]]
  [[ "$output" =~ "Type mismatch" ]]
}

@test "TW02 :expressions should evaluate with correct precedence" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names where id = 3+3/3;
OCTO
  run cat output.txt
  [[ "$output" =~ "Joey" ]]
  ! [[ "$output" =~ "Cereal|Killer" ]]
}

@test "TW03 :where does not equal" {
  run octo <<OCTO
select * from names where firstName <> "Cereal";
OCTO
  [[ "$output" =~ "Joey" ]]
  ! [[ "$output" =~ "Cereal|Killer" ]]
}

@test "TW04 :where with * from list" {
  run octo<<OCTO 2>&1 | tee output.txt
select * from (select id from names);
OCTO
  run cat output.txt
  # Success on this test is just it not getting a sig11
}

@test "TW05 :where with * from *" {
  run octo >& output.txt <<OCTO
select *
FROM (
  select * from names as t1
  inner join names as t2
  on t1.id = t2.id
  order by t1.firstName
);
OCTO
  run cat output.txt
  # Success on this test is just it not getting a sig11
}

@test "TW06 :where IS NULL" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names where lastName IS NULL;
OCTO
  # We should NOT find Joey as it has a lastName of "" which is different from NULL
  [[ "$(grep -c "|" output.txt)" == "0" ]]
}

@test "TW07 :where with subquery and SELECT" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT CASE firstName
  WHEN 'Zero' THEN 'Zero'
  WHEN 'Acid' THEN 'Acid'
  END as firstName,
  lastName
FROM names
WHERE firstName = "Zero";
OCTO
  [[ "$(grep -c "|" output.txt)" == "2" ]]
}

@test "TW08 :where with a string inequality" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT *
FROM names
WHERE firstName < "Zero";
OCTO
  # Allow one "Zero" for echoing the SELECT statement
  [[ "$(grep -c "Zero" output.txt)" == "1" ]]
  [[ "$(grep -c "|" output.txt)" != "0" ]]
}

@test "TW09 :where with a string inequality which is not Z" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT *
FROM names
WHERE firstName < "G";
OCTO
  # Expected response is Acid Burn and Cereal Killer
  [[ "$(grep -c "|" output.txt)" == "2" ]]
  octo <<OCTO &> output2.txt
SELECT *
FROM names
WHERE firstName > "G";
OCTO
  # Expected response is Zero Cool (twice), Lord Nikon, and Joey
  [[ "$(grep -c "|" output2.txt)" == "4" ]]
}

@test "TW10 :verify having a function in the WHERE doesn't break anything" {
  octo <<OCTO 2>&1 | tee output.txt
CREATE FUNCTION MPIECE(VARCHAR, VARCHAR, INTEGER) RETURNS VARCHAR AS \$PIECE;
SELECT *
FROM names
WHERE MPIECE(firstName, "e", 1) = "Z"
OCTO
  [[ "$(grep -c "|" output.txt)" == "2" ]]
}

@test "TW11 :where with a regex comparison" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT *
FROM names
WHERE firstName ~ "^Z";
OCTO
  [[ "$(grep -c "|" output.txt)" == "2" ]]
}

@test "TW12 :where with a regex comparison that fails due to case" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT *
FROM names
WHERE firstName ~ "^z";
OCTO
  [[ "$(grep -c "|" output.txt)" == "0" ]]
}

@test "TW13 :where with a regex comparison that is case insensitive" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT *
FROM names
WHERE firstName ~* "^z";
OCTO
  [[ "$(grep -c "|" output.txt)" == "2" ]]
}

@test "TW14 :where IN with a value-list" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT *
FROM names
WHERE firstName IN ("Zero", "Acid");
OCTO
  [[ "$(grep -c "|" output.txt)" == "3" ]]
}

@test "TW15 :where NOT IN with a value-list" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT *
FROM names
WHERE firstName NOT IN ("Zero", "Acid");
OCTO
  [[ "$(grep -c "|" output.txt)" == "3" ]]
  [[ "$(grep -c "Zero|" output.txt)" == "0" ]]
}

@test "TW16 :NOT regex case sensitive" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT *
FROM names
WHERE firstName !~ "^Z";
OCTO
  [[ "$(grep -c "|Z" output.txt)" == "0" ]]
}

@test "TW17 :NOT regex case sensitive with no matches" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT *
FROM names
WHERE firstName !~ "^z";
OCTO
  [[ "$(grep -c "|Z" output.txt)" == "2" ]]
}

@test "TW18 :NOT regex case insensitive" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT *
FROM names
WHERE firstName !~* "^z";
OCTO
  [[ "$(grep -c "|Z" output.txt)" == "0" ]]
}

@test "TW19 :LIKE with wildcard" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT *
FROM names
WHERE firstName LIKE 'Z%';
OCTO
  [[ "$(grep -c "|Z" output.txt)" == "2" ]]
}

@test "TW20 :LIKE with single char match" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT *
FROM names
WHERE firstName LIKE '_ero';
OCTO
  [[ "$(grep -c "|Zero" output.txt)" == "2" ]]
}

@test "TW21 :NOT LIKE with wildcard" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT *
FROM names
WHERE firstName NOT LIKE 'Z%';
OCTO
  [[ "$(grep -c "|Z" output.txt)" == "0" ]]
  [[ "$(grep -c "|Acid" output.txt)" == "1" ]]
}

@test "TW22 : OCTO416 : YDB-E-RPARENMISSING error when NOT IN operator has hundreds of choices" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TW22.sql
}

@test "TW23 : OCTO416 : YDB-E-RPARENMISSING error when NOT IN operator in FULL JOIN ON clause has hundreds of choices" {
  # Below contains list of queries that don't currently run in Postgres but do run in Octo so cannot be folded
  # into the "run_query_in_octo_and_postgres_and_crosscheck_multiple_queries" call in the TW22 subtest above.
  load_fixture TW23.sql subtest novv
  verify_output TW23 output.txt
}

@test "TW24 : Test of MODULO operator % with negative operands (Octo behavior differs from Postgres)" {
  # The MODULO operator works differently between Octo and Postgres and so we cannot fold this into the
  # "run_query_in_octo_and_postgres_and_crosscheck_multiple_queries" call.
  load_fixture TW24.sql subtest novv
  verify_output TW24 output.txt
}

