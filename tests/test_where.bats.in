
load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
}

@test "where with string limits return values" {
  run octo <<OCTO
select * from names where firstName = "Zero";
OCTO
  [[ "$output" =~ "Zero|Cool" ]]
  ! [[ "$output" =~ "Joey" ]]
}

@test "where with invalid comparisons should return an error" {
  octo <<OCTO &> output.txt
select * from names where firstName = 5;
OCTO
  run cat output.txt
  [[ "$output" =~ "ERROR" ]]
  [[ "$output" =~ "Type mismatch" ]]
}

@test "expressions should evaluate with correct precedence" {
  octo <<OCTO &> output.txt
select * from names where id = 3+3/3;
OCTO
  run cat output.txt
  [[ "$output" =~ "Joey" ]]
  ! [[ "$output" =~ "Cereal|Killer" ]]
}

@test "where does not equal" {
  run octo <<OCTO
select * from names where firstName <> "Cereal";
OCTO
  [[ "$output" =~ "Joey" ]]
  ! [[ "$output" =~ "Cereal|Killer" ]]
}

@test "where with * from list" {
  run octo<<OCTO &> output.txt
select * from (select id from names);
OCTO
  run cat output.txt
  # Success on this test is just it not getting a sig11
}

@test "where with * from *" {
  run octo >& output.txt <<OCTO
select *
FROM (
  select * from names as t1
  inner join names as t2
  on t1.id = t2.id
  order by t1.firstName
);
OCTO
  run cat output.txt
  # Success on this test is just it not getting a sig11
}

@test "where IS NULL" {
  octo <<OCTO &> output.txt
select * from names where lastName IS NULL;
OCTO
  # We should find Joey
  [[ "$(grep -c "|" output.txt)" == "1" ]]
}

@test "where with subquery and SELECT" {
  octo <<OCTO &> output.txt
SELECT CASE firstName
  WHEN 'Zero' THEN 'Zero'
  WHEN 'Acid' THEN 'Acid'
  END as firstName,
  lastName
FROM names
WHERE firstName = "Zero";
OCTO
  [[ "$(grep -c "|" output.txt)" == "2" ]]
}

@test "where with a string inequality" {
  octo <<OCTO &> output.txt
SELECT *
FROM names
WHERE firstName < "Zero";
OCTO
  # Allow one "Zero" for echoing the SELECT statement
  [[ "$(grep -c "Zero" output.txt)" == "1" ]]
  [[ "$(grep -c "|" output.txt)" != "0" ]]
}

@test "where with a string inequality which is not Z" {
  octo <<OCTO &> output.txt
SELECT *
FROM names
WHERE firstName < "G";
OCTO
  # Expected response is Acid Burn and Cereal Killer
  [[ "$(grep -c "|" output.txt)" == "2" ]]
  octo <<OCTO &> output2.txt
SELECT *
FROM names
WHERE firstName > "G";
OCTO
  # Expected response is Zero Cool (twice), Lord Nikon, and Joey
  [[ "$(grep -c "|" output2.txt)" == "4" ]]
}
