#################################################################
#								#
# Copyright (c) 2019 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

init_test() {
  export test_temp=$(mktemp -d @TEST_OUTPUT_DIR@/bats-test.XXXXXX)
  echo "Temporary files in: $test_temp"
  exec >  >(tee -ia $test_temp/stdout.txt)
  exec 2> >(tee -ia $test_temp/stderr.txt >&2)
  cd $test_temp
  export PATH="@PROJECT_BINARY_DIR@/src:$PATH"
  # Needed to circumvent Ctrl-M ('^M') characters in long query strings
  export COLUMNS=1024
}

init_tls() {
	# Generate CA key and certificate
	openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -pass pass:tester -out $test_temp/CA.key
	openssl req -new -nodes -key $test_temp/CA.key -passin pass:tester -days 365 -x509 \
			-subj "/C=US/ST=PA/L=Malvern/O=Octo/CN=www.yottadb.com" -out $test_temp/CA.crt
	# Create server key and certificate request
	openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -pass pass:tester -out $test_temp/server.key
	openssl req -new -key $test_temp/server.key -passin pass:tester \
		-subj "/C=US/ST=PA/L=Malvern/O=Octo/CN=www.yottadb.com" -out $test_temp/server.csr
	# Sign certificate based on request and local CA
	openssl x509 -req -in $test_temp/server.csr -CA $test_temp/CA.crt -CAkey $test_temp/CA.key -CAcreateserial \
		-out server.crt -days 365
  # Set $USER to prevent docker ENV problems
  export USER=root
	# Pass private key password to environment variable
  echo tester | $ydb_dist/plugin/gtmcrypt/maskpass | cut -f 3 -d " " >> env.log
	export ydb_tls_passwd_OCTOSERVER=$(echo tester | $ydb_dist/plugin/gtmcrypt/maskpass | cut -f 3 -d " ")
  export ydb_crypt_config=$test_temp/octo.conf
  if [[ $# == "0" ]]; then
    rocto_port=1337
  else
    rocto_port=$1
  fi
  cat <<OCTO &>> $test_temp/octo.conf
rocto: {
  port: $rocto_port;
	ssl_on: true;
}

tls: {
	CAfile: "$test_temp/CA.crt";
	CApath: "$test_temp/";
	OCTOSERVER: {
		format: "PEM";
		cert: "$test_temp/server.crt";
		key: "$test_temp/server.key";
	}
}
OCTO
}

copy_test_files() {
  for f in $@; do
    mkdir -p $test_temp/$(dirname $f)
    cp @PROJECT_SOURCE_DIR@/tests/$f $test_temp/$f
  done
}

# load_fixture <fixture name, relative to tests/fixtures
load_fixture() {
  fixture_name=$1
  echo "Loading fixture $fixture_name"
  if [[ $fixture_name == *.zwr ]]; then
    $ydb_dist/mupip load  @PROJECT_SOURCE_DIR@/tests/fixtures/$fixture_name
  elif [[ $fixture_name == *.sql ]]; then
    octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/$fixture_name
  else
    exit 1
  fi
}

createdb() {
  unset ydb_gbldir gtmgbldir	# needed or else ydb_env_set can issue ZGBLDIRACC error (due to it calling MUPIP DUMPFHEAD)
				# if ydb_gbldir is defined and points to a non-existent gld file.
  source @YOTTADB_INCLUDE_DIRS@/ydb_env_set
  export ydb_routines=". @PROJECT_BINARY_DIR@/src/_ydbocto.so @PROJECT_BINARY_DIR@ $ydb_routines"
  export ydb_ci="@PROJECT_BINARY_DIR@/ydbocto.ci"

  export ydb_gbldir="mumps.gld"
  echo "ydb_gbldir: $ydb_gbldir"
  $ydb_dist/mumps -r ^GDE <<FILE
change -r DEFAULT -key_size=1019 -record_size=1048576
change -segment DEFAULT -file_name=$test_temp/mumps.dat
change -r DEFAULT -NULL_SUBSCRIPTS=true
exit
FILE
  rm *.dat || true
  $ydb_dist/mupip create
  echo "Populating seed data"
  load_fixture postgres-seed.sql
  load_fixture postgres-seed.zwr
  # Set the below env var to ensure no DBFILEXT messages show up in syslog and in turn in individual test output files
  # e.g. if a test redirects stderr to a file output.txt, then syslog messages would show up in that file if run through
  # the pipeline causing a test failure if that is compared against a reference file (e.g. TC001 in test_create_table.bats.in)
  export ydb_dbfilext_syslog_disable=1
}

start_rocto() {
  echo "ROCTO START" >> env.log
  env >> env.log
  if [[ "" != $1 ]]; then
    cat <<OCTO &> $test_temp/octo.conf
rocto: {
  port: $1;
}
OCTO
  fi
  rocto -vv &> rocto.log &
  echo $! > rocto.pid
  while [[ "$(grep -c "rocto started" rocto.log)" == "0" ]]; do
    sleep .1s
  done
}

stop_rocto() {
  if [[ -e rocto.pid ]]; then
    $ydb_dist/mupip stop $(cat rocto.pid)
  fi
}

run_psql() {
  if [[ @YDB_TLS_AVAILABLE@ -eq 1 ]]; then
    PGPASSWORD=ydbrocks psql -U ydb "host=localhost port=$1"
  else
    PGPASSWORD=ydbrocks psql -U ydb "sslmode=disable host=localhost port=$1"
  fi
}

run_psql_auth() {
  if [[ @YDB_TLS_AVAILABLE@ -eq 1 ]]; then
    PGPASSWORD=$2 psql -U $1 "host=localhost port=$3"
  else
    PGPASSWORD=$2 psql -U $1 "sslmode=disable host=localhost port=$3"
  fi
}

create_user() {
  echo -n $2 | yottadb -r %ydboctoAdmin add user $1
}

delete_users() {
  for user in $@; do
    yottadb -r %ydboctoAdmin delete user $user
  done
}

setup_go() {
  mkdir -p "$test_temp/go/src/"
  export GOPATH="$test_temp/go"
}

run_go() {
  cp -r @PROJECT_SOURCE_DIR@/tests/go/src/$1 $GOPATH/src/$1
  go get $1
  go build $1
  $GOPATH/bin/$1
}

verify_output() {
  echo "Comparing outref/$1 $2"
  copy_test_files outref/$1.ref

  # filter verbosity statements from octo and psql
  # a default octo install will have WARNING verbosity so INFO and DEBUG will need to be filtered
  # psql will print INFO and DEBUG so those need to be filtered
  sed '/\[ INFO\]\|^INFO:/d' $2 > noinfo.txt
  sed '/\[DEBUG\]\|^DEBUG:/,/^$/d' noinfo.txt > nodebug.txt

  # filter time and dates
  sed -i 's/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/DATE/' nodebug.txt
  sed -i 's/[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}/TIME/' nodebug.txt

  # filter file path
  sed -i 's/\/.*\/.*\.[yc]:[0-9]*/PATH:LINENUM/' nodebug.txt

  diff outref/$1.ref nodebug.txt
  return
}

# some tests (that use -vv switch) need to see info so don't filter that
verify_output_info() {
  echo "Comparing outref/$1 $2"
  copy_test_files outref/$1.ref

  # filer verbosity statements from octo and psql
  sed '/\[DEBUG\]\|^DEBUG:/,/^$/d' output.txt > nodebug.txt

  # filter time and dates
  sed -i 's/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/DATE/' nodebug.txt
  sed -i 's/[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}/TIME/' nodebug.txt

  # filter info header
  sed -i '/OCTO>/,$!d' nodebug.txt

  # filter file path
  sed -i 's/\/*\/.*\.[yc]:[0-9]*/PATH:LINENUM/' nodebug.txt
  sed -i 's/\.\/_ydbocto.*\.m/M_ROUTINE/' nodebug.txt
  sed -i 's/cursor [0-9]*/CURSOR_NUM/' nodebug.txt

  diff outref/$1.ref nodebug.txt
  return
}

count_for_loops() {
  numloops=$(grep -c "FOR " $1 | cat)
  if [[ $numloops -ne $2 ]]; then
    echo "Expected $2 FOR loops but found $numloops loops instead in $1"
    return -1
  fi
  return
}

