#################################################################
#								#
# Copyright (c) 2019-2020 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
  load_fixture names2.sql
  load_fixture names2.zwr
}

@test "where with string limits return values" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names where firstName = "Zero";
OCTO
  run cat output.txt
  [[ "$output" =~ "Zero|Cool" ]]
  ! [[ "$output" =~ "Joey" ]]
  ls _ydboctoX*.m &> ls.txt
  wc -w ls.txt &> wc.txt
  cut -d " " -f 1 wc.txt 2>&1 | tee output.txt
  run cat output.txt
  [[ $output -eq 1 ]]
  [[ "$(grep -c xref _ydboctoP*.m)" > 0 ]]
  run $ydb_dist/mumps -r %XCMD zwrite ^%ydboctoxref
  [[ "$output" =~ "^%ydboctoxref(\"NAMES\",\"FIRSTNAME\",\"Zero\")=" ]]
  [[ "$output" =~ "^%ydboctoxref(\"NAMES\",\"FIRSTNAME\")=" ]]
}

@test "where from table with two keys" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names2 where lastName = "Cool";
OCTO
  run cat output.txt
  [[ "$output" =~ "Zero|Cool" ]]
  ! [[ "$output" =~ "Joey" ]]
  ls _ydboctoX*.m &> ls.txt
  wc -w ls.txt &> wc.txt
  cut -d " " -f 1 wc.txt 2>&1 | tee output.txt
  run cat output.txt
  [[ $output -eq 1 ]]
  [[ "$(grep -c xref _ydboctoP*.m)" > 0 ]]
  run $ydb_dist/mumps -r %XCMD zwrite ^%ydboctoxref
  [[ "$output" =~ "^%ydboctoxref(\"NAMES2\",\"LASTNAME\",\"Cool\")=" ]]
  [[ "$output" =~ "^%ydboctoxref(\"NAMES2\",\"LASTNAME\")=" ]]
}

@test "where from table with two keys and where is key" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names2 where firstName = "Zero";
OCTO
  run cat output.txt
  [[ "$output" =~ "Zero|Cool" ]]
  ! [[ "$output" =~ "Joey" ]]
}

@test "where from table with two keys inverted where" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names2 where "Cool" = lastName;
OCTO
  run cat output.txt
  [[ "$output" =~ "Zero|Cool" ]]
  ! [[ "$output" =~ "Joey" ]]
  ls _ydboctoX*.m &> ls.txt
  wc -w ls.txt &> wc.txt
  cut -d " " -f 1 wc.txt 2>&1 | tee output.txt
  run cat output.txt
  [[ $output -eq 1 ]]
  [[ "$(grep -c xref _ydboctoP*.m)" > 0 ]]
  run $ydb_dist/mumps -r %XCMD zwrite ^%ydboctoxref
  [[ "$output" =~ "^%ydboctoxref(\"NAMES2\",\"LASTNAME\",\"Cool\")=" ]]
  [[ "$output" =~ "^%ydboctoxref(\"NAMES2\",\"LASTNAME\")=" ]]
}

@test "where from table with two keys and one key is equal to non-key" {
  ## TODO: this test is skipped until we get the optimization engine to "order" expressions
  octo <<OCTO 2>&1 | tee output.txt
select * from names2 where firstName = lastName;
OCTO
  # We can't know the lastName before getting the firstName, so there are no optimizations in this case
}

@test "where from table with two keys and one key is equal to non-key inverted" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names2 where lastName = firstName;
OCTO
}


@test "verify that triggers create new indexes and delete them" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT * FROM names WHERE firstName = "Zero";
OCTO
  ls _ydboctoX*.m &> ls.txt
  wc -w ls.txt &> wc.txt
  cut -d " " -f 1 wc.txt 2>&1 | tee output.txt
  run cat output.txt
  [[ $output -eq 1 ]]
  $ydb_dist/mumps -r %XCMD 'SET ^names(6)="Charles|Hathaway"'
  run $ydb_dist/mumps -r %XCMD zwrite ^%ydboctoxref
  [[ "$output" =~ "%ydboctoxref(\"NAMES\",\"FIRSTNAME\",\"Charles\",6)" ]]
  $ydb_dist/mumps -r %XCMD 'kill ^names(6)'
  run $ydb_dist/mumps -r %XCMD 'ZWRITE ^ydboctoxref'
  [[ ! ( "$output" =~ "%ydboctoxref(\"NAMES\",\"FIRSTNAME\",\"Charles\",6)" ) ]]
}

@test "verify that when we iterate on a fix'd key we don't iterate extra xref keys" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT *
FROM names n1
INNER JOIN names n2
ON n1.id = n2.id
WHERE n2.firstName = "Zero"
OCTO
  [[ "$(grep -c "|" output.txt)" == "2" ]]
}
