#################################################################
#								#
# Copyright (c) 2020-2021 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

# See https://valgrind.org/docs/manual/mc-manual.html#mc-manual.suppfiles for the syntax that Valgrind will accept.

# These are leaks that should be ignored, because they are not necessarily bugs.
{
  YDB_leaks
  Memcheck:Leak
  ...
  obj:*/libyottadb.so
  obj:*/libyottadb.so
  ...
}
{
  YDB_startup_leaks
  Memcheck:Leak
  ...
  fun:ydb_init
  fun:octo_init
  fun:main
}
# See https://gitlab.com/YottaDB/DBMS/YDBOcto/-/issues/615#note_434704262 for
# what's going on here. malloc/calloc
{
  pointers_stored_in_M
  Memcheck:Leak
  fun:malloc
  fun:alloc_chunk
  fun:find_function
  fun:function_call_data_type_check
  fun:populate_data_type
  ...
}
{
  pointers_stored_in_M
  Memcheck:Leak
  fun:calloc
  fun:alloc_chunk
  fun:find_function
  fun:function_call_data_type_check
  fun:populate_data_type
  ...
}
{
   pointers_stored_in_M
   Memcheck:Leak
   fun:malloc
   fun:alloc_chunk
   fun:find_table
   ...
}
{
   pointers_stored_in_M
   Memcheck:Leak
   fun:calloc
   fun:alloc_chunk
   fun:find_table
   ...
}
# `input_buffer_combined` lives throughout the lifetime of the program, so this isn't really a leak.
# It's a pain to clean it up in each and every test runner, so just ignore the valgrind warning.
{
  input_buffer_combined
  Memcheck:Leak
  fun:calloc
  fun:octo_init
  fun:main
}
# The only time this can be freed is at the very end of the program, when it is exiting anyway.
# Since fixing it would require freeing the config in each test runner, it doesn't make sense to track it.
{
  global_config
  Memcheck:Leak
  fun:malloc
  fun:octo_init
  fun:main
}

# TODO: These are leaks that are explicitly tracked, but should be fixed at some point.
{
  crypto_leak_malloc
  Memcheck:Leak
  fun:malloc
  fun:CRYPTO_malloc
  ...
  fun:octo_init
  fun:main
}
{
  crypto_leak_realloc
  Memcheck:Leak
  fun:realloc
  fun:CRYPTO_realloc
  ...
  fun:octo_init
  fun:main
}
{
  merge_config_file_leak
  Memcheck:Leak
  ...
  fun:merge_config_file
  fun:octo_init
  fun:main
}
{
  parse_config_file_leak
  Memcheck:Leak
  ...
  fun:parse_config_file_settings
  fun:octo_init
  fun:main
}
{
  # This error is odd - it's trying to write a single int into a buffer of arbitrary length,
  # which reads uninitialized stack memory following it.
  # However, it only happens in the test suite (with the mocked version of `read_bytes`),
  # so it doesn't affect Rocto in production.
  wrap_read_bytes_uninitialized_memory
  Memcheck:Addr2
  ...
  fun:__wrap_read_bytes
  fun:read_cancel_request
  fun:test_valid_input
  ...
}
# Tracked at https://gitlab.com/YottaDB/DB/YDB/-/issues/820
{
   ydb820a
   Memcheck:Param
   pwrite64(buf)
   ...
   fun:pwrite
   fun:wcs_wtstart
   ...
}
{
   ydb820b
   Memcheck:Param
   pwrite64(count)
   ...
   fun:pwrite
   fun:wcs_wtstart
   ...
}
{
   # This one is really rare, but maybe something the C compiler does, as it's the same line (704)
   # in wcs_wtstart as above. Happened on TTA005.
   ydb820c
   Memcheck:Cond
   fun:wcs_wtstart
   fun:wcs_stale
   fun:timer_handler
   ...
}
{
   # This one is really rare, but maybe something the C compiler does, as it's the same line (704)
   # in wcs_wtstart as above. Happened on TTA005.
   ydb820d
   Memcheck:Cond
   fun:wcs_wtstart
   fun:wcs_flu
   fun:gds_rundown
   fun:gv_rundown
   fun:gtm_exit_handler
   ...
}

# This old bug report was closed by the pthreads author saying that there is no memory leak
# https://sourceware.org/bugzilla/show_bug.cgi?id=3087
# There is a lot of controversy and bad answers on the Internet, esp. those
# advising that you need to detach from the thread, but none of that is
# actually documented in any of the pthread man pages, making me think that
# this is bad advice.
# Confirmed here: https://stackoverflow.com/questions/68513951/pthread-create-appears-to-leak-memory
{
   pthreads_known_leak1
   Memcheck:Leak
   ...
   fun:calloc
   ...
   fun:_dl_allocate_tls
   fun:allocate_stack
   fun:pthread_create@@GLIBC*
   fun:main
}
{
   pthreads_known_leak2
   Memcheck:Leak
   ...
   fun:calloc
   ...
   fun:_dl_allocate_tls
   fun:pthread_create@@GLIBC*
   fun:main
}

# gtm_tls* calls leaks tracked at https://gitlab.com/YottaDB/Util/YDBEncrypt/-/issues/3
{
   gtm_tls_socket
   Memcheck:Leak
   ...
   fun:gtm_tls_socket
   fun:main
}
{
   gtm_tls_init
   Memcheck:Leak
   ...
   fun:gtm_tls_init
   fun:main
}
{
   gtm_tls_accept
   Memcheck:Leak
   ...
   fun:gtm_tls_accept
   fun:main
}
# I think these (libssl and libcrypto) are just side effects of the gtm_tls* calls leaking
{
   libssl_all
   Memcheck:Leak
   ...
   obj:*/libssl.so.*
}
{
   libcrypto_all
   Memcheck:Leak
   ...
   obj:*/libcrypto.so.*
}
# This is tracked at https://gitlab.com/YottaDB/DB/YDB/-/issues/801
{
   YDB801
   Memcheck:Value8
   fun:db_csh_get
   fun:t_qread
   fun:gvcst_search
   fun:gvcst_get2
   fun:gvcst_get
   fun:op_gvget
   fun:ydb_get_s
   fun:find_table
   fun:table_reference
   fun:yyparse
   fun:parse_line
   fun:run_query
}
{
   YDB801
   Memcheck:Cond
   ...
   fun:gvcst_search
   fun:gvcst_root_search
   fun:op_gvname_common
   fun:op_gvname_fast
   ...
}
