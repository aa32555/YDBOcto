#################################################################
#								#
# Copyright (c) 2020-2021 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

# See https://valgrind.org/docs/manual/mc-manual.html#mc-manual.suppfiles for the syntax that Valgrind will accept.

# These are leaks that should be ignored, because they are not necessarily bugs.
{
  YDB_uninit_mem
  Memcheck:Cond
  ...
  obj:*/libyottadb.so
  obj:*/libyottadb.so
  ...
}
{
  YDB_leaks
  Memcheck:Leak
  ...
  obj:*/libyottadb.so
  obj:*/libyottadb.so
  ...
}
{
  YDB_PEEKBYNAME
  Memcheck:Leak
  ...
  obj:*/libyottadb.so
  obj:*/libyottadb.so
  ...
}
{
  YDB_startup_leaks
  Memcheck:Leak
  ...
  fun:ydb_init
  fun:octo_init
  fun:main
}
# See https://gitlab.com/YottaDB/DBMS/YDBOcto/-/issues/615#note_434704262 for
# what's going on here
{
  pointers_stored_in_M
  Memcheck:Leak
  fun:malloc
  fun:alloc_chunk
  fun:find_function
  fun:populate_data_type
  ...
}
# `input_buffer_combined` lives throughout the lifetime of the program, so this isn't really a leak.
# It's a pain to clean it up in each and every test runner, so just ignore the valgrind warning.
{
  input_buffer_combined
  Memcheck:Leak
  fun:calloc
  fun:octo_init
  fun:main
}
# The only time this can be freed is at the very end of the program, when it is exiting anyway.
# Since fixing it would require freeing the config in each test runner, it doesn't make sense to track it.
{
  global_config
  Memcheck:Leak
  fun:malloc
  fun:octo_init
  fun:main
}

# TODO: These are leaks that are explicitly tracked, but should be fixed at some point.
{
  crypto_leak_malloc
  Memcheck:Leak
  fun:malloc
  fun:CRYPTO_malloc
  ...
  fun:octo_init
  fun:main
}
{
  crypto_leak_realloc
  Memcheck:Leak
  fun:realloc
  fun:CRYPTO_realloc
  ...
  fun:octo_init
  fun:main
}
{
  merge_config_file_leak
  Memcheck:Leak
  ...
  fun:merge_config_file
  fun:octo_init
  fun:main
}
{
  parse_config_file_leak
  Memcheck:Leak
  ...
  fun:parse_config_file_settings
  fun:octo_init
  fun:main
}
{
  # This error is odd - it's trying to write a single int into a buffer of arbitrary length,
  # which reads uninitialized stack memory following it.
  # However, it only happens in the test suite (with the mocked version of `read_bytes`),
  # so it doesn't affect Rocto in production.
  wrap_read_bytes_uninitialized_memory
  Memcheck:Addr2
  ...
  fun:__wrap_read_bytes
  fun:read_cancel_request
  fun:test_valid_input
  ...
}
